[tool.poetry]
name = "llm_cybersec_benchmark"
version = "0.1.0"
description = "LLM Cybersecurity Attack Detection Benchmarking System"
authors = ["Academic Research Team"]
readme = "README.md"
packages = [{include = "benchmark", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
# Core dependencies
pydantic = ">=2.5"
sqlalchemy = ">=2.0"
click = ">=8.0"
rich = ">=13.0"
pyyaml = "^6.0.1"
aiosqlite = "^0.19.0"
greenlet = ">=2.0"

# ML dependencies
scikit-learn = ">=1.4"
numpy = ">=1.24"
pandas = ">=2.1"

# Apple Silicon ML
mlx = ">=0.15"
mlx-lm = ">=0.10"

# API clients
openai = ">=1.0"
anthropic = ">=0.7"
httpx = ">=0.25"
tenacity = ">=8.2.0"
kaggle = ">=1.5.16"
datasets = ">=2.16.0"

# Additional core utilities
asyncio = "^3.4.3"
pathlib = "*"
typing-extensions = "^4.0"

# Email processing dependencies
beautifulsoup4 = ">=4.12.0"
lxml = ">=4.9.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = ">=7.4"
pytest-asyncio = ">=0.21"
pytest-cov = ">=4.0"
pytest-mock = ">=3.12"

# Code quality
ruff = ">=0.1"
mypy = ">=1.8"
types-pyyaml = ">=6.0"
pre-commit = ">=3.6"

# Additional dev tools
ipython = "^8.0"
jupyter = "^1.0"

[tool.poetry.scripts]
benchmark = "benchmark.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Slow running tests"
]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ARG002", # unused method argument
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["benchmark"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_decorators = false
warn_return_any = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.integration.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "sqlalchemy.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "benchmark.core.database"
ignore_errors = true

[[tool.mypy.overrides]]
module = "benchmark.core.database_manager"
ignore_errors = true

[[tool.mypy.overrides]]
module = "benchmark.cli.*"
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = "benchmark.models.plugins.*"
ignore_errors = true
